/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matthewm101;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map.Entry;
import java.util.TreeSet;
import javax.swing.DefaultListModel;
import javax.swing.SwingWorker;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

/**
 * A JFrame menu that displays a heatmap and presents controls that can change
 * the appearance and backing data for the heatmap.
 * @author Matthew M
 */
public class HeatmapMenu extends javax.swing.JFrame
        implements HeatmapGenerator.HeatmapGeneratedHandler {
    
    /**
     * A set of tags that are broader, more useful categories.
     */
    public static final TreeSet<String> USEFUL_TAGS = new TreeSet<>(
            Arrays.asList(
                "aerialway", "aeroway", "amenity", "healthcare", "barrier",
                "boundary", "building", "craft", "emergency", "geological",
                "highway", "sidewalk", "cycleway", "busway", "historic",
                "landuse", "leisure", "man_made", "military", "natural",
                "office", "place", "power", "public_transport", "railway",
                "route", "shop", "sport", "telecom",
                "tourism", "waterway", "name"
            ));
    
    /**
     * The object used to generate heatmaps.
     */
    private HeatmapGenerator heatmapGen;
    
    private DefaultListModel<String> listModel = new DefaultListModel();
    
    private boolean generating;
    
    /**
     * The current task that heatmapGen is executing.
     */
    private SwingWorker<Void, String> task;

    /**
     * States whether the criteria has been changed. If this is true, the
     * heatmap should be generated (distances SHOULD be recalculated).
     */
    private boolean criteriaChanged = true;

    /**
     * States whether the distance has been changed. If this is true while
     * criteriaChanged is false, then the heatmap should be regenerated
     * (distances SHOULD NOT be recalculated).
     */
    private boolean distanceChanged = true;
    
    /**
     * Creates new form HeatmapMenu
     * @param gen A heatmap generator that this object will use.
     */
    public HeatmapMenu(HeatmapGenerator gen) {
        this.heatmapGen = gen;
        initComponents();
        this.heatmapGen.setProgressBarToUpdate(loadingBar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        heatmapPanel = new HeatmapPanel();
        mainPanel = new javax.swing.JPanel();
        treePane = new javax.swing.JScrollPane();
        filterTree = new javax.swing.JTree();
        addCriterionButton = new javax.swing.JButton();
        howToRemoveLabel = new javax.swing.JLabel();
        criteriaPane = new javax.swing.JScrollPane();
        criteriaList = new javax.swing.JList<>();
        removeAllButton = new javax.swing.JButton();
        generateHeatmapButton = new javax.swing.JButton();
        loadingBar = new javax.swing.JProgressBar();
        distanceLabel = new javax.swing.JLabel();
        distanceSpinner = new javax.swing.JSpinner();
        labelPanel = new javax.swing.JPanel();
        nearestPOILabel = new javax.swing.JLabel();
        coordinateLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        heatmapPanel.setMaximumSize(getBGDimension());
        heatmapPanel.setMinimumSize(getBGDimension());
        heatmapPanel.setPreferredSize(getBGDimension());
        heatmapPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                heatmapPanelMouseMoved(evt);
            }
        });
        heatmapPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                heatmapPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                heatmapPanelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout heatmapPanelLayout = new javax.swing.GroupLayout(heatmapPanel);
        heatmapPanel.setLayout(heatmapPanelLayout);
        heatmapPanelLayout.setHorizontalGroup(
            heatmapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        heatmapPanelLayout.setVerticalGroup(
            heatmapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        filterTree.setModel(getTreeModel());
        filterTree.setAutoscrolls(true);
        filterTree.setRootVisible(false);
        filterTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterTreeMouseClicked(evt);
            }
        });
        filterTree.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                filterTreeComponentResized(evt);
            }
        });
        filterTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                filterTreeValueChanged(evt);
            }
        });
        treePane.setViewportView(filterTree);

        addCriterionButton.setText("Please select a criterion or preset.");
        addCriterionButton.setEnabled(false);
        addCriterionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCriterionButtonActionPerformed(evt);
            }
        });

        howToRemoveLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        howToRemoveLabel.setText("Double-click a criterion to remove it.");
        howToRemoveLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        criteriaList.setModel(listModel);
        criteriaList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        criteriaList.setAutoscrolls(false);
        criteriaList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                criteriaListMouseClicked(evt);
            }
        });
        criteriaPane.setViewportView(criteriaList);

        removeAllButton.setText("Remove All");
        removeAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllButtonActionPerformed(evt);
            }
        });

        generateHeatmapButton.setText("Generate Heatmap");
        generateHeatmapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateHeatmapButtonActionPerformed(evt);
            }
        });

        distanceLabel.setText("Maximum Heatmap Distance: 1.00 km (0.62 mi)");

        distanceSpinner.setModel(new javax.swing.SpinnerNumberModel(5.0d, 0.25d, 50.0d, 0.25d));
        distanceSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                distanceSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addCriterionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(criteriaPane)
                    .addComponent(generateHeatmapButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadingBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(treePane)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(howToRemoveLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(distanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(distanceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(treePane, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addCriterionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(howToRemoveLabel)
                    .addComponent(removeAllButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(criteriaPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateHeatmapButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distanceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        nearestPOILabel.setText(" ");

        coordinateLabel.setText(" ");

        javax.swing.GroupLayout labelPanelLayout = new javax.swing.GroupLayout(labelPanel);
        labelPanel.setLayout(labelPanelLayout);
        labelPanelLayout.setHorizontalGroup(
            labelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(labelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(coordinateLabel)
                    .addComponent(nearestPOILabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        labelPanelLayout.setVerticalGroup(
            labelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(coordinateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nearestPOILabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(heatmapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(heatmapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllButtonActionPerformed
        listModel.removeAllElements();
        setCriteriaChanged();
    }//GEN-LAST:event_removeAllButtonActionPerformed

    private void filterTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_filterTreeValueChanged
        Object node = filterTree.getLastSelectedPathComponent();
        if (node instanceof DefaultMutableTreeNode) {
            Object data = ((DefaultMutableTreeNode) node).getUserObject();
            if (data instanceof String) {
                if (((DefaultMutableTreeNode) node).isLeaf()) {
                    DefaultMutableTreeNode parent = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) node).getParent();
                    String key = (String) parent.getUserObject();
                    String value = (String) data;
                    addCriterionButton.setText("Add criterion ("+key+", "+value+")");
                    addCriterionButton.setEnabled(true);
                } else if (((DefaultMutableTreeNode) node).getParent() instanceof DefaultMutableTreeNode && 
                        !((DefaultMutableTreeNode)((DefaultMutableTreeNode) node).getParent()).isRoot()){
                    String key = (String) data;
                    addCriterionButton.setText("Add criterion ("+key+", any value)");
                    addCriterionButton.setEnabled(true);
                } else {
                    addCriterionButton.setText("Please select a criterion or preset.");
                    addCriterionButton.setEnabled(false);
                }
            } else if (data instanceof Preset) {
                addCriterionButton.setText("Add preset \""+((Preset) data).displayName+"\"");
                addCriterionButton.setEnabled(true);
            } else {
                addCriterionButton.setText("Please select a criterion or preset.");
                addCriterionButton.setEnabled(false);
            }
        } else {
            addCriterionButton.setText("Please select a criterion or preset.");
            addCriterionButton.setEnabled(false);
        }
    }//GEN-LAST:event_filterTreeValueChanged

    private void criteriaListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_criteriaListMouseClicked
        if (evt.getClickCount() >= 2) {
            listModel.remove(criteriaList.getSelectedIndex());
            setCriteriaChanged();
        }
    }//GEN-LAST:event_criteriaListMouseClicked

    private void generateHeatmapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateHeatmapButtonActionPerformed
        if (!generating) {
            if (criteriaChanged) {
                if (listModel.size() > 0) {
                    //If the criteria changed, a new heatmap should be made.
                    heatmapGen.removeAllCriteria();
                    for (int i = 0; i < listModel.getSize(); i++) {
                        String crit = listModel.getElementAt(i);
                        String[] pair = crit.split(", ");
                        if (pair.length == 2) {
                            heatmapGen.addCriterion(pair[0], pair[1]);
                        } else {
                            heatmapGen.addCriterion(pair[0], null);
                        }
                    }
                    heatmapGen.setMaxDistance((Double)distanceSpinner.getValue());
                    //A task is created so the GUI does not freeze.
                    //This makes the operation cancellable, and it allows for
                    //a loading bar to be used.
                    task = heatmapGen.getGenerateTask(this);
                    generating = true;
                    setInputStates();
                    task.execute();
                } else {
                    loadingBar.setStringPainted(true);
                    loadingBar.setString("Please choose at least one criteria.");
                }
            } else if (distanceChanged) {
                //If the criteria did not change but the max distance changed,
                //then the heatmap can be quickly regenerated.
                heatmapGen.setMaxDistance((Double)distanceSpinner.getValue());
                task = heatmapGen.getRegenerateTask(this);
                generating = true;
                setInputStates();
                task.execute();
            }
        } else {
            generating = false;
            task.cancel(true);
            setInputStates();
        }
    }//GEN-LAST:event_generateHeatmapButtonActionPerformed

    private void filterTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterTreeMouseClicked
        if (evt.getClickCount() >= 2) {
            addCriterionButtonActionPerformed(new ActionEvent(evt.getSource(), evt.getID(), null));
        }
    }//GEN-LAST:event_filterTreeMouseClicked

    private void addCriterionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCriterionButtonActionPerformed
        Object node = filterTree.getLastSelectedPathComponent();
        if (node instanceof DefaultMutableTreeNode) {
            Object data = ((DefaultMutableTreeNode) node).getUserObject();
            if (data instanceof String) {
                if (((DefaultMutableTreeNode) node).isLeaf()) {
                    DefaultMutableTreeNode parent = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) node).getParent();
                    String key = (String) parent.getUserObject();
                    String value = (String) data;
                    if (!listModel.contains(key+", "+value)) {
                        listModel.addElement(key+", "+value);
                        setCriteriaChanged();
                    }
                } else if (((DefaultMutableTreeNode) node).getParent() instanceof DefaultMutableTreeNode &&
                    !((DefaultMutableTreeNode)((DefaultMutableTreeNode) node).getParent()).isRoot()){
                    String key = (String) data;
                    if (!listModel.contains(key)) {
                        listModel.addElement(key);
                        setCriteriaChanged();
                    }
                }
            } else if (data instanceof Preset) {
                for (Entry<String, String> entry : ((Preset) data).entries) {
                    if (!listModel.contains(entry.getKey()+", "+entry.getValue())) {
                        listModel.addElement(entry.getKey()+", "+entry.getValue());
                        setCriteriaChanged();
                    }
                }
            }
        }
    }//GEN-LAST:event_addCriterionButtonActionPerformed

    private void distanceSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_distanceSpinnerStateChanged
        setDistanceChanged();
        String km = String.format("%.2f", (Double)distanceSpinner.getValue());
        String mi = String.format("%.2f", (Double)distanceSpinner.getValue() * 0.621371);
        distanceLabel.setText("Maximum Heatmap Distance: "+km+" km ("+mi+" mi)");
    }//GEN-LAST:event_distanceSpinnerStateChanged

    private void heatmapPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_heatmapPanelMouseMoved
        double lon = heatmapGen.getLonFromX(evt.getX());
        double lat = heatmapGen.getLatFromY(evt.getY());
        String lonStr = String.format("%.5f", Math.abs(lon)) + (lon > 0 ? " E" : " W");
        String latStr = String.format("%.5f", Math.abs(lon)) + (lon > 0 ? " N" : " S");
        coordinateLabel.setText("Mouse Location: "+latStr+", "+lonStr);
        PointOfInterest poi = heatmapGen.getNearestPOI(evt.getX(), evt.getY());
        if (poi ==  null) {
            nearestPOILabel.setText(" ");
            return;
        }
        String name = "unnamed";
        if (poi.getDescriptors().containsKey("name")) {
            name = poi.getDescriptors().get("name");
        }
        String loc = " ";
        if (poi != null) {
            lon = poi.getLongitude();
            lat = poi.getLatitude();
            lonStr = String.format("%.5f", Math.abs(lon)) + (lon > 0 ? " E" : " W");
            latStr = String.format("%.5f", Math.abs(lon)) + (lon > 0 ? " N" : " S");
            loc = "at " + latStr + ", " + lonStr;
        }
        double distKm = heatmapGen.getDistanceToNearestPOI(evt.getX(), evt.getY());
        double distMi = distKm * 0.621371;
        String kmStr = String.format("%.2f", distKm);
        String miStr = String.format("%.2f", distMi);
        nearestPOILabel.setText("Nearest POI: "+name+" "+loc+", "+kmStr+" km ("+miStr+" mi) away");
    }//GEN-LAST:event_heatmapPanelMouseMoved

    private void heatmapPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_heatmapPanelMouseEntered
       heatmapPanelMouseMoved(evt);
    }//GEN-LAST:event_heatmapPanelMouseEntered

    private void heatmapPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_heatmapPanelMouseExited
       coordinateLabel.setText(" ");
       nearestPOILabel.setText(" ");
    }//GEN-LAST:event_heatmapPanelMouseExited

    private void filterTreeComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_filterTreeComponentResized
        //The following lines prevent these labels from disappearing from view
        //if the screen suddenly resizes
        String cText = coordinateLabel.getText();
        String nText = nearestPOILabel.getText();
        coordinateLabel.setText("Filler");
        nearestPOILabel.setText("Filler");
        pack();
        coordinateLabel.setText(cText);
        nearestPOILabel.setText(nText);
    }//GEN-LAST:event_filterTreeComponentResized

    /**
     * Returns the dimension of this menu's heatmap image.
     * @return The dimension of the heatmap
     */
    private Dimension getBGDimension() {
        return new Dimension(this.heatmapGen.getBackgroundImage().getWidth(), this.heatmapGen.getBackgroundImage().getHeight());
    }

    /**
     * Returns the TreeModel used in the selection tree.
     * @return A TreeModel
     */
    private TreeModel getTreeModel() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode();
        DefaultTreeModel model = new DefaultTreeModel(root);
        DefaultMutableTreeNode presets = new DefaultMutableTreeNode("Presets");
        DefaultMutableTreeNode usefultags = new DefaultMutableTreeNode("Useful Tags");
        DefaultMutableTreeNode othertags = new DefaultMutableTreeNode("Other Tags");
        root.add(presets);
        root.add(usefultags);
        root.add(othertags);
        List<Preset> presetSortedList = Arrays.asList(Preset.values());
        Collections.sort(presetSortedList);
        for (Preset preset : presetSortedList) {
            presets.add(new DefaultMutableTreeNode(preset));
        }
        List<String> keySortedList = new ArrayList<>(heatmapGen.getPOITagMap().keySet());
        Collections.sort(keySortedList);
        for (String key : keySortedList){
            DefaultMutableTreeNode keyBranch = new DefaultMutableTreeNode(key);
            if (USEFUL_TAGS.contains(key)) {
                usefultags.add(keyBranch);
            } else {
                othertags.add(keyBranch);
            }
            List<String> valueSortedList = new ArrayList<>(heatmapGen.getValueTagMap().get(key));
            Collections.sort(valueSortedList);
            for (String poi : valueSortedList) {
                keyBranch.add(new DefaultMutableTreeNode(poi));
            }
        }
        model.reload();
        return model;
    }

    /**
     * Enables and disables inputs depending on if the menu is loading.
     */
    private void setInputStates() {
        addCriterionButton.setEnabled(!generating);
        criteriaList.setEnabled(!generating);
        criteriaPane.setEnabled(!generating);
        filterTree.setEnabled(!generating);
        removeAllButton.setEnabled(!generating);
        treePane.setEnabled(!generating);
        loadingBar.setStringPainted(generating);
        loadingBar.setString("Generating Heatmap");
        loadingBar.setValue(0);
        String buttonText = "Please change the criteria or distance.";
        if (generating) {
            buttonText = "Cancel";
        } else if (criteriaChanged) {
            buttonText = "Generate Heatmap";
        } else if (distanceChanged) {
            buttonText = "Regenerate Heatmap";
        }
        generateHeatmapButton.setText(buttonText);
        generateHeatmapButton.setEnabled(criteriaChanged || distanceChanged);
    }

    /**
     * Resets certain GUI elements once the heatmap is finished generating.
     */
    @Override
    public void handleGenerated() {
        if (generating) {
            generating = false;
            criteriaChanged = false;
            distanceChanged = false;
            setInputStates();
            loadingBar.setIndeterminate(false);
            loadingBar.setStringPainted(false);
            loadingBar.setValue(0);
            heatmapPanel.repaint();
        }
    }

    /**
     * Changes the "generate" button's text if the max distance changes.
     */
    private void setDistanceChanged() {
        distanceChanged = true;
        generateHeatmapButton.setEnabled(true);
        if (!criteriaChanged) {
            generateHeatmapButton.setText("Regenerate Heatmap");
        }
    }

    /**
     * Changes the "generate" button's text if the criteria change.
     */
    private void setCriteriaChanged() {
        criteriaChanged = true;
        generateHeatmapButton.setEnabled(true);
        generateHeatmapButton.setText("Generate Heatmap");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCriterionButton;
    private javax.swing.JLabel coordinateLabel;
    private javax.swing.JList<String> criteriaList;
    private javax.swing.JScrollPane criteriaPane;
    private javax.swing.JLabel distanceLabel;
    private javax.swing.JSpinner distanceSpinner;
    private javax.swing.JTree filterTree;
    private javax.swing.JButton generateHeatmapButton;
    private javax.swing.JPanel heatmapPanel;
    private javax.swing.JLabel howToRemoveLabel;
    private javax.swing.JPanel labelPanel;
    private javax.swing.JProgressBar loadingBar;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel nearestPOILabel;
    private javax.swing.JButton removeAllButton;
    private javax.swing.JScrollPane treePane;
    // End of variables declaration//GEN-END:variables


    /**
     * A JPanel that draws a HeatmapGenerator's heatmap.
     */
    public class HeatmapPanel extends javax.swing.JPanel {
        
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(heatmapGen.getBackgroundImage(), 0, 0, null);
            g.drawImage(heatmapGen.getHeatmapImage(), 0, 0, null);
        }
    }

    /**
     * An enum of useful amenity sets.
     */
    public enum Preset {
        FIRE_SERVICES("Fire Safety Services",
            new SimpleEntry<>("amenity", "fire_station"),
            new SimpleEntry<>("emergency", "fire_alarm_box"),
            new SimpleEntry<>("emergency", "fire_extinguisher"),
            new SimpleEntry<>("emergency", "fire_flapper"),
            new SimpleEntry<>("emergency", "fire_hose"),
            new SimpleEntry<>("emergency", "fire_hydrant"),
            new SimpleEntry<>("emergency", "water_tank"),
            new SimpleEntry<>("emergency", "fire_water_pond")
        ),
        ALCOHOL("Alcohol-serving Locations",
            new SimpleEntry<>("amenity", "bar"),
            new SimpleEntry<>("amenity", "biergarten"),
            new SimpleEntry<>("amenity", "pub"),
            new SimpleEntry<>("amenity", "nightclub"),
            new SimpleEntry<>("shop", "alcohol"),
            new SimpleEntry<>("shop", "wine"),
            new SimpleEntry<>("shop", "brewing_supplies")
        ),
        FAST_FOOD("Fast Food or Sugary Food Locations",
            new SimpleEntry<>("amenity", "fast_food"),
            new SimpleEntry<>("craft", "confectionery"),
            new SimpleEntry<>("amenity", "ice_cream"),
            new SimpleEntry<>("shop", "frozen_food"),
            new SimpleEntry<>("shop", "confectionery"),
            new SimpleEntry<>("shop", "pastry"),
            new SimpleEntry<>("shop", "chocolate"),
            new SimpleEntry<>("shop", "ice_cream")
        ),
        HEALTHY_FOOD("Health-Promoting Locations",
            new SimpleEntry<>("amenity", "clinic"),
            new SimpleEntry<>("shop", "health_food"),
            new SimpleEntry<>("shop", "chemist"),
            new SimpleEntry<>("amenity", "pharmacy"),
            new SimpleEntry<>("shop", "herbalist"),
            new SimpleEntry<>("shop", "massage"),
            new SimpleEntry<>("shop", "medical_supply"),
            new SimpleEntry<>("shop", "nutrition_supplements"),
            new SimpleEntry<>("shop", "optician"),
            new SimpleEntry<>("leisure", "fitness_centre"),
            new SimpleEntry<>("amenity", "gym"),
            new SimpleEntry<>("amenity", "dojo"),
            new SimpleEntry<>("shop", "greengrocer"),
            new SimpleEntry<>("leisure", "fitness_station"),
            new SimpleEntry<>("leisure", "sports_centre")
        ),
        CAR_ACCIDENTS("Car Accident Risky Locations",
            new SimpleEntry<>("amenity", "motorcycle_parking"),
            new SimpleEntry<>("amenity", "parking"),
            new SimpleEntry<>("amenity", "parking_space"),
            new SimpleEntry<>("building", "parking"),
            new SimpleEntry<>("highway", "stop"),
            new SimpleEntry<>("lanes", "2"),
            new SimpleEntry<>("highway", "traffic_signals")
        ),
        POLICE("Police Stations and Services",
            new SimpleEntry<>("amenity", "police"),
            new SimpleEntry<>("ranger", "station"),
            new SimpleEntry<>("amenity", "prison")
        ),
        EMERGENCY_HEALTH("Emergency Health Services",
            new SimpleEntry<>("emergency", "ambulance_station"),
            new SimpleEntry<>("emergency", "defibrillator"),
            new SimpleEntry<>("emergency", "first_aid_kit"),
            new SimpleEntry<>("emergency", "emergency_ward_entrance"),
            new SimpleEntry<>("emergency", "lifeguard"),
            new SimpleEntry<>("emergency", "phone"),
            new SimpleEntry<>("emergency", "rescue_box"),
            new SimpleEntry<>("amenity", "hospital"),
            new SimpleEntry<>("emergency", "yes"),
            new SimpleEntry<>("building", "hospital")
        );
        
        public String displayName;
        public Entry<String, String>[] entries;

        /**
         * Creates a new Preset with the specified name and criteria.
         * @param name The name of the preset.
         * @param ents The criteria of the preset.
         */
        Preset(String name, Entry<String, String>... ents) {
            displayName = name;
            entries = ents;
        }
        
        @Override
        public String toString() {
            return displayName;
        }    
    }
}
